name: Workflow
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  MONGO_URI: ${{ secrets.MONGO_URI }}
  MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

jobs:
    unit-test:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v4.2.2

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '18'

        - name: Cache node modules
          uses: actions/cache@v4
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
                ${{ runner.os }}-node-

        - name: Install Dependencies
          run: npm install

        - name: Run Unit Tests
          id: unit-test
          run: npm test

        - name: Upload test results
          if: steps.unit-test.outcome == 'failure' || steps.unit-test.outcome == 'success'
          uses: actions/upload-artifact@v4
          with:
            name: unit-test-results
            path: ./test-results.xml

    Code-Coverage:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout
          uses: actions/checkout@v4.2.2

        - name: Set up Node.js
          uses: actions/setup-node@v4
          with:
            node-version: '18'

        - name: Cache node modules
          uses: actions/cache@v4
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
            restore-keys: |
                ${{ runner.os }}-node-

        - name: Install Dependencies
          run: npm install

        - name: Run code coverage
          id: code-coverage
          run: npm run coverage

        - name: Upload code coverage results
          if: steps.code-coverage.outcome == 'failure' || steps.code-coverage.outcome == 'success'
          uses: actions/upload-artifact@v4
          with:
            name: code-coverage-results
            path: ./coverage/lcov.info

    Scan-Secrets-with-Gitleaks:
        name: gitleaks
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@v4
          with:
            fetch-depth: 0
        - uses: gitleaks/gitleaks-action@v2
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    build-docker-image:
        runs-on: ubuntu-latest
        needs: [Scan-Secrets-with-Gitleaks]
        steps:
            - name: Checkout source code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Docker Hub
              uses: docker/login-action@v3
              with:
                username: ${{ secrets.DOCKER_USERNAME }}
                password: ${{ secrets.DOCKER_PASSWORD }}

            - name: Build image (load locally)
              uses: docker/build-push-action@v5
              with:
                context: .
                push: false
                tags: msoliman427/solar-system:${{ github.sha }}
                load: true 
                build-args: |
                    MONGO_URI=${{ secrets.MONGO_URI }}
                    MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}
                    MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}

            - name: Install Trivy
              run: |
                curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.22.0/trivy_0.22.0_Linux-64bit.deb -o trivy.deb
                sudo dpkg -i trivy.deb

            - name: Scan Docker image for vulnerabilities
              run: |
                trivy image --exit-code 1 --severity CRITICAL --no-progress msoliman427/solar-system:${{ github.sha }}

            - name: Push image to Docker Hub
              if: success()  # Push image only if the scan was successful
              uses: docker/build-push-action@v5
              with:
                context: .
                push: true
                tags: msoliman427/solar-system:${{ github.sha }}
                build-args: |
                    MONGO_URI=${{ secrets.MONGO_URI }}
                    MONGO_USERNAME=${{ secrets.MONGO_USERNAME }}
                    MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
                    MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }}
        
    deploy-to-eks:
        name: Deploy to Amazon EKS
        runs-on: ubuntu-latest
        needs: build-docker-image
        steps:
        - name: Checkout source code
          uses: actions/checkout@v4

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-1 

        - name: Update kubeconfig for EKS cluster
          run: |
            aws eks update-kubeconfig --name eks-dev-cluster --region us-east-1

        - name: Replace image tag placeholder with GitHub SHA
          run: |
            sed -i "s|__IMAGE_TAG__|${{ github.sha }}|g" kubernetes/development/deployment.yaml
          

        - name: Deploy to EKS
          run: |
            kubectl apply -f kubernetes/development/deployment.yaml
            kubectl apply -f kubernetes/development/service.yaml
            kubectl apply -f kubernetes/development/ingress.yaml
